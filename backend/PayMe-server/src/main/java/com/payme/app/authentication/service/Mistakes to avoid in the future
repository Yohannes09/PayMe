OLD IMPLEMENTATION OF LOGIN

PROBLEM? The database was making many redundant queries

Action                  Why Query Fires                     Result

findByUser(user)        Passing a detached User            2nd Query
                        triggers a fresh SELECT

sessionToken.getUser()  Saving the token triggers          3rd Query
                        another user SELECT

generateAuthentication  Access (getFirstName, getEmail)    4th Query
DTOResponse()           triggers re-fetch

token.getToken()        Token expiry check lazily loads    5th Query
                        the token

User.getAccounts()      Proxy assumption triggers more     6th Query
(even indirectly)       queries
******************************************************************************************************
    public AuthenticationResponseDto login(LoginDto loginDto) {

        // AuthManger makes a call (Normal)
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginDto.getUsernameOrEmail(),
                        loginDto.getPassword()
                )
        );

        // MISTAKE 1: This user object becomes detached
        // when you pass a detached entity to a repository,
        // Hibernate doesn't recognize it.
        // Thus hibernate must fetch that entity again
        User user = (User) authentication.getPrincipal();
        String jwtToken = tokenRepository
                .findByUser(user)   <-- DETACHED ENTITY
                .filter(token -> !jwtService.isTokenExpired(token.getToken()))
                .map(SessionToken::getToken)
                .orElseGet(()-> {
                            String jwt = jwtService.generateToken(user);
                            createUserSession(user, jwt);
                            return jwt;
                });

        return generateAuthenticationResponse(user, jwtToken);
    }

    private void createUserSession(User user, String token){
        Date creationTime = jwtService.extractClaim(token, Claims::getIssuedAt);
        Date expirationTime = jwtService.extractClaim(token, Claims::getExpiration);

        SessionToken sessionToken = SessionToken.builder()
                .user(user)
                .token(token)
                .createdAt(creationTime)
                .expiresAt(expirationTime)
                .build();

        // MISTAKE 2: Detached user is saved when token is.
        // Another redundant query made.
        tokenRepository.save(sessionToken);
    }


    public void logout(String token){
        tokenRepository.deleteByToken(token);
    }


    private AuthenticationResponseDto generateAuthenticationResponse(User user, String jwtToken){
        // MISTAKE 3: User getters trigger more redundant calls.
        return AuthenticationResponseDto.builder()
                .userId(user.getUserId())
                .token(jwtToken)
                .firstName(user.getFirstName())
                .lastName(user.getLastName())
                .email(user.getEmail())
                .build();
    }


    private User generateUserFromDto(RegisterDto registerDto){
         return User.builder()
                .firstName(registerDto.getFirstName())
                .lastName(registerDto.getLastName())
                .username(registerDto.getUsername())
                .email(registerDto.getEmail())
                .accounts(new ArrayList<>())
                .password(passwordEncoder.encode(registerDto.getPassword()))
                .roles(Set.of(PaymeRoles.USER))
                .isActive(true)
                .build();
    }